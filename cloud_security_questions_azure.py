# -*- coding: utf-8 -*-
"""Cloud_security_questions_azure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aaWurU5TysEAHki8kKay7lR1twoGI7Xf
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
pd.__version__

import pandas as pd
import json

with open('/content/drive/MyDrive/IM Datasets/Azure-900-full.json','r') as f:
  data = json.loads(f.read())
azure = pd.json_normalize(data, record_path =['all_azure_questions'], record_prefix='azure_')

azure

azure.shape

azure.isnull().sum()

azure = azure.dropna()

azure.shape

import re
azure['azure_question_details'] = \
azure['azure_question_details'].map(lambda x: re.sub('[,\.!?]', '', x))
azure['azure_question_details'] = \
azure['azure_question_details'].map(lambda x: re.sub('<[a-zA-Z\/][^>]*>', ' ', x))
# Convert the titles to lowercase
azure['azure_question_details'] = \
azure['azure_question_details'].map(lambda x: x.lower())
# Print out the first rows of papers
azure['azure_question_details'].head()

from wordcloud import WordCloud
# Join the different processed titles together.
long_string = ','.join(list(azure['azure_question_details'].values))
# Create a WordCloud object
wordcloud = WordCloud(background_color="white", max_words=5000, contour_width=3, contour_color='steelblue')
# Generate a word cloud
wordcloud.generate(long_string)
# Visualize the word cloud
wordcloud.to_image()

import gensim
from gensim.utils import simple_preprocess
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['would','using','quot','know','want','could','use','like','one','also','etc','lt','gt','com','www'])
def sent_to_words(sentences):
    for sentence in sentences:
        # deacc=True removes punctuations
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) 
             if word not in stop_words] for doc in texts]
data = azure.azure_question_details.values.tolist()
data_words = list(sent_to_words(data))
# remove stop words
data_words = remove_stopwords(data_words)
print(data_words)
print(data_words[:1][0][:30])

import gensim.corpora as corpora
# Create Dictionary
id2word = corpora.Dictionary(data_words)
# Create Corpus
texts = data_words
# Term Document Frequency
corpus = [id2word.doc2bow(text) for text in texts]
# View
print(corpus[:1][0][:30])

from pprint import pprint
# number of topics
num_topics = 10
# Build LDA model
lda_model = gensim.models.LdaMulticore(corpus=corpus,
                                       id2word=id2word,
                                       num_topics=num_topics)
# Print the Keyword in the 10 topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]

!pip install pyLDAvis==3.3.1

import pickle 
import pyLDAvis
import pyLDAvis.gensim_models as gensimvis
# Visualize the topics
pyLDAvis.enable_notebook()
#LDAvis_data_filepath = os.path.join('./results/ldavis_prepared_'+str(num_topics))
# # this is a bit time consuming - make the if statement True
# # if you want to execute visualization prep yourself
LDAvis_prepared = pyLDAvis.gensim_models.prepare(lda_model, corpus, id2word)
LDAvis_prepared